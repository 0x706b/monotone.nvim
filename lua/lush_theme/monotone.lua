local lush = require('lush')
local hsl = lush.hsl

local colors = {
  fg = hsl('#bebaba').li(20),
  bg = hsl('#121111'),
  bg0 = hsl('#393636'),
  bg1 = hsl('#222020'),
  bg2 = hsl('#171616'),
  fg0 = hsl('#5e5959'),
  fg1 = hsl('#787271'),
  fg2 = hsl('#9c9695'),
  err = hsl('#f54646'),
  warn = hsl('#f5ac46'),
  info = hsl('#46bbf5'),
  eob = hsl('#723030'),
  nt = hsl('#9b4a3a'),
  yellow = hsl('#d8a763'),
  green = hsl('#8db18a').li(10).sa(10),
  red = hsl('#d86363'),
  blue = hsl('#81a7bb'),
  magenta = hsl('#AD8ECA'),

  white = hsl('#D3CFCF'),
}

---@diagnostic disable: undefined-global
local theme = lush(function ()
  return {
    Normal { fg = colors.fg, bg = colors.bg },
    NormalTransparent { fg = colors.fg },
    Visual { fg = colors.bg, bg = colors.fg },
    Cursor { bg = colors.err },
    ColorColumn { bg = colors.bg2 },
    CursorLine { bg = colors.bg1 },
    CursorLineNr { fg = colors.fg2, bg = colors.bg1 },
    CursorLineNrIt { fg = colors.fg2, bg = colors.bg1, gui = 'italic' },
    Folded { fg = colors.fg, bg = colors.bg1, gui = 'italic' },
    Search { fg = colors.bg, bg = colors.warn, gui = 'bold' },
    IncSearch { fg = colors.bg, bg = colors.warn, gui = 'bold,reverse' },
    LineNr { fg = colors.fg0 },
    VertSplit { fg = colors.fg0 },
    WildMenu { fg = colors.bg, bg = colors.fg },
    FoldColumn {},
    SignColumn {},
    SpecialKey { gui = 'bold' },
    Error { fg = colors.err, gui = 'bold' },
    ErrorMsg { Error },
    Warning { fg = colors.warn, gui = 'bold' },
    WarningMsg { Warning },
    MoreMsg { fg = colors.info, gui = 'bold' },
    MatchParen { fg = colors.bg, bg = colors.warn },
    ParenMatch { MatchParen },
    Pmenu { fg = colors.fg1, bg = colors.bg2 },
    PmenuSbar { bg = colors.bg2 },
    PmenuSel { fg = colors.bg2, bg = colors.fg2 },
    PmenuThumb { bg = colors.bg0 },
    StatusLine { fg = colors.fg2, bg = colors.bg1 },
    StatusLineNC { fg = colors.fg0 },
    TabLine { fg = colors.fg0 },
    TabLineFill { fg = colors.fg0 },
    TabLineSel { fg = colors.fg2 },
    Comment { fg = colors.fg1 },
    String { fg = colors.green },
    Number { fg = colors.yellow },
    Type { fg = colors.blue, gui = 'bold' },
    Delimiter { fg = colors.red },
    Operator { Delimiter },
    EndOfBuffer { fg = colors.eob },
    NonText { fg = colors.nt },
    Todo { fg = colors.warn, gui = 'bold,italic' },
    Whitespace { fg = colors.bg0 },
    Function {},
    Identifier { gui = 'italic' },
    Include { gui = 'italic' },
    Keyword { gui = 'bold' },
    Question { gui = 'italic' },
    Statement { gui = 'bold' },
    Special { gui = 'bold' },
    Underlined { gui = 'underline' },
    Title { gui = 'bold' },
    DiffAdd { fg = colors.green },
    DiffDelete { fg = colors.red },
    DiffChange { fg = colors.yellow },
    DiffText { fg = colors.blue, gui = 'underline' },
    Conceal {},
    Constant {},
    Define {},
    Directory {},
    Label {},
    PreProc {},
    Noise {},
    CurorWordHighlight { Underlined },
    NormalFloat { NormalTransparent },
    -- CoC
    CocHighlightText { Underlined },
    CocErrorHighlight { sp = colors.err, gui = 'undercurl' },
    CocWarningHighlight { sp = colors.warn, gui = 'undercurl' },
    CocInfoHighlight { sp = colors.info, gui = 'undercurl' },
    CocHintHighlight { CocInfoHighlight },
    CocErrorSign { fg = colors.err },
    CocWarningSign { fg = colors.warn },
    CocInfoSign { fg = colors.info },
    CocHintSign { CocInfoSign },
    CocUnderline { fg = colors.fg, gui='bold,underline' },
    HighlightedyankRegion { Warning },
    -- typescript
    typescriptObjectLabel { fg = colors.fg },
    typescriptCall { fg = colors.fg, gui = 'italic' },
    typescriptOperator { fg = colors.red, gui = 'bold' },
    typesciptTypeReference { Type },
    typescriptTypeParameter { Type },
    typescriptTypeReference { Type },
    typescriptTypeParameter { Type },
    typescriptArrowFunc { Statement },
    typescriptParens { Delimiter },
    typescriptBraces { Delimiter },
    typescriptArrowFuncArg { typescriptCall },
    typescriptTypeBrackets { Delimiter },
    typescriptDotNotation { Delimiter },
    typescriptTypeAnnotation { Delimiter },
    typescriptBinaryOp { typescriptOperator },
    typescriptTernaryOp { typescriptOperator },
    typescriptTypeQuery { typescriptOperator },
    typescriptMappedIn { typescriptOperator },
    typescriptAssign { typescriptOperator },
    typescriptUnaryOp { typescriptOperator },
    typescriptBracket { Delimiter },
    typescriptPredefinedType { Special },
    typescriptTypeArguments { Delimiter },
    typescriptInterfaceName { Type },
    typescriptClassName { Type },
    typescriptAliasDeclaration { Type },
    typescriptNull { Number },
    typescriptBoolean { Number },
    tsxIntrinsicTagName { Special },
    tsxTagName { Type },
    tsxTag { Delimiter },
    tsxCloseTag { Delimiter },
    tsxCloseString { Delimiter },
    tsxAttrib { NormalTransparent },
    tsxEqual { Delimiter },
    typescriptDocNotation { fg = colors.fg1, gui = 'bold,italic' },
    typescriptDocTags { typescriptDocNotation },
    jsxTagName { Special },
    jsxComponentName { Type },
    jsxOpenPunct { Delimiter },
    jsxClosePunct { Delimiter },
    jsxCloseString { Delimiter },
    jsxAttrib { NormalTransparent },
    -- lua
    luaParen { Delimiter },
    luaTable { Delimiter },

    -- meta
    monotone { lush = colors }
  }
end)

require('build').build(colors)

return theme
