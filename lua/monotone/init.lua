local lush = require('lush')
local hsl = lush.hsl

local colors = {
  bg    = hsl(5, 3, 7),
  bg0   = hsl(5, 3, 9),
  bg1   = hsl(5, 3, 13),
  bg2   = hsl(5, 3, 22),
  fg0   = hsl(5, 3, 36),
  fg1   = hsl(5, 3, 46),
  fg2   = hsl(5, 3, 60),
  fg    = hsl(5, 3, 73.8),
  white = hsl(5, 3, 82),

  b = {
    red    = hsl(0, 90, 62),
    yellow = hsl(35, 90, 62),
    blue   = hsl(200, 90, 62),
  },

  n = {
    yellow  = hsl(35, 60, 62),
    green   = hsl(115, 20, 62),
    red     = hsl(0, 60, 62),
    blue    = hsl(200, 30, 62),
    magenta = hsl(270, 30, 62),
  },

  git = {
    change = hsl('#7788aa'),
    add    = hsl('#88aa77'),
    delete = hsl('#aa7766').sa(20)
  },

  eob = hsl(0, 40, 32),
  nt  = hsl(10, 45, 42),
}

---@diagnostic disable: undefined-global
local theme = lush(function ()
  return {
    Normal { fg = colors.fg, bg = colors.bg },
    NormalTransparent { fg = colors.fg },
    Visual { fg = colors.bg, bg = colors.fg },
    Cursor { bg = colors.b.red },
    ColorColumn { bg = colors.bg2 },
    CursorLine { bg = colors.bg0.li(2) },
    CursorLineNr { fg = colors.n.yellow, bg = colors.bg0.li(2), gui = 'bold' },
    CursorLineNrIt { fg = colors.fg2, bg = colors.bg0, gui = 'italic' },
    Folded { fg = colors.fg, bg = colors.bg1, gui = 'italic' },
    Search { fg = colors.bg, bg = colors.b.yellow, gui = 'bold' },
    IncSearch { fg = colors.bg, bg = colors.b.yellow, gui = 'bold,reverse' },
    LineNr { fg = colors.fg0 },
    VertSplit { fg = colors.fg0 },
    WildMenu { fg = colors.bg, bg = colors.fg },
    FoldColumn {},
    SignColumn {},
    SpecialKey { gui = 'bold' },
    Error { fg = colors.b.red, gui = 'bold' },
    ErrorMsg { Error },
    Warning { fg = colors.b.yellow },
    WarningMsg { Warning, gui = 'bold' },
    MoreMsg { fg = colors.b.blue, gui = 'bold' },
    MatchParen { fg = colors.bg, bg = colors.b.yellow },
    ParenMatch { MatchParen },
    Pmenu { fg = colors.fg1, bg = colors.bg0 },
    PmenuSbar { bg = colors.bg0 },
    PmenuSel { fg = colors.bg0, bg = colors.fg2 },
    PmenuThumb { bg = colors.bg2 },
    StatusLine { fg = colors.fg2, bg = colors.bg1 },
    StatusLineNC { fg = colors.fg0 },
    TabLine { fg = colors.fg2, bg = colors.bg0 },
    TabLineFill { fg = colors.fg2, bg = colors.bg0 },
    TabLineSel { fg = colors.fg, bg = colors.bg2.da(10) },
    Comment { fg = colors.fg1 },
    String { fg = colors.n.green },
    Number { fg = colors.n.yellow },
    Type { fg = colors.n.blue, gui = 'bold' },
    Delimiter { fg = colors.n.red },
    Operator { Delimiter },
    EndOfBuffer { fg = colors.eob },
    NonText { fg = colors.nt },
    Todo { fg = colors.b.yellow, gui = 'bold,italic' },
    Whitespace { fg = colors.bg2 },
    Function {},
    Identifier { gui = 'italic' },
    Include { gui = 'italic' },
    Keyword { gui = 'bold' },
    Question { gui = 'italic' },
    Statement { gui = 'bold' },
    Special { gui = 'bold' },
    Underlined { gui = 'underline' },
    Title { gui = 'bold' },
    DiffAdd { fg = colors.bg, bg = colors.git.add },
    DiffDelete { fg = colors.bg, bg = colors.git.delete },
    DiffChange { fg = colors.bg, bg = colors.git.change },
    DiffText { fg = colors.bg, bg = colors.git.change, gui = 'underline' },
    Conceal {},
    Constant {},
    Define {},
    Directory {},
    Label {},
    PreProc {},
    Noise {},
    CurorWordHighlight { Underlined },
    -- CoC
    CocHighlightText { Underlined },
    CocErrorHighlight { sp = colors.b.red, gui = 'undercurl' },
    CocWarningHighlight { sp = colors.b.yellow, gui = 'undercurl' },
    CocInfoHighlight { sp = colors.b.blue, gui = 'undercurl' },
    CocHintHighlight { CocInfoHighlight },
    CocErrorSign { fg = colors.b.red },
    CocWarningSign { fg = colors.b.yellow },
    CocInfoSign { fg = colors.b.blue },
    CocHintSign { CocInfoSign },
    CocUnderline { fg = colors.fg, gui='underline' },
    HighlightedyankRegion { Warning },
    -- typescript
    typescriptObjectLabel { fg = colors.fg },
    typescriptCall { fg = colors.fg, gui = 'italic' },
    typescriptOperator { fg = colors.n.red, gui = 'bold' },
    typesciptTypeReference { Type },
    typescriptTypeParameter { Type },
    typescriptTypeReference { Type },
    typescriptTypeParameter { Type },
    typescriptArrowFunc { Statement },
    typescriptParens { Delimiter },
    typescriptBraces { Delimiter },
    typescriptArrowFuncArg { typescriptCall },
    typescriptTypeBrackets { Delimiter },
    typescriptDotNotation { Delimiter },
    typescriptTypeAnnotation { Delimiter },
    typescriptBinaryOp { typescriptOperator },
    typescriptTernaryOp { typescriptOperator },
    typescriptTypeQuery { typescriptOperator },
    typescriptMappedIn { typescriptOperator },
    typescriptAssign { typescriptOperator },
    typescriptUnaryOp { typescriptOperator },
    typescriptBracket { Delimiter },
    typescriptPredefinedType { Special },
    typescriptTypeArguments { Delimiter },
    typescriptInterfaceName { Type },
    typescriptClassName { Type },
    typescriptAliasDeclaration { Type },
    typescriptNull { Number },
    typescriptBoolean { Number },
    tsxIntrinsicTagName { Special },
    tsxTagName { Type },
    tsxTag { Delimiter },
    tsxCloseTag { Delimiter },
    tsxCloseString { Delimiter },
    tsxAttrib { NormalTransparent },
    tsxEqual { Delimiter },
    typescriptDocNotation { fg = colors.fg1, gui = 'bold,italic' },
    typescriptDocTags { typescriptDocNotation },
    typescriptObjectColon { Delimiter },
    typescriptObjectSpread { Delimiter },
    -- jsx
    jsxTagName { Special },
    jsxComponentName { Type },
    jsxOpenPunct { Delimiter },
    jsxClosePunct { Delimiter },
    jsxCloseString { Delimiter },
    jsxAttrib { NormalTransparent, gui = 'italic' },
    jsxBraces { Delimiter },
    -- lua
    luaParen { Delimiter },
    luaTable { Delimiter },
    -- meta
    Monotone { lush = colors },
    -- GitSigns
    GitSignsCurrentLineBlame { LineNr },
    GitSignsAdd { fg = colors.git.add },
    GitSignsDelete { fg = colors.git.delete },
    GitSignsChange { fg = colors.git.change },
    -- IndentBlankline
    IndentBlanklineContextChar { fg = colors.bg2.li(20) }
  }
end)

require('monotone.build').build(colors)

return theme
